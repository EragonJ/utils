#!/usr/bin/perl
=mplayerd
  mplayerd - mplayer daemon
  Control it by issuing commands through the named pipe
  Get now playing info by executing mplayerd when the daemon's already running
=cut

use strict;
use Mplayer::NowPlaying qw($np_log np);
use Carp;
use Data::Dumper;
use Getopt::Long;


my $fifo  = "$ENV{HOME}/.mplayer/mplayerd.fifo";
my $log   = "$ENV{HOME}/.mplayer/mplayerd.log";
my $mplay = 'mplayer -quiet';
my $mpopt = "-identify -slave -input file=$fifo";
my $lock  = '/tmp/mplayerd.pid'; # /var/run/

$np_log = $log;

# Will not work unless we fork() ourselves away and abuse a child for the
# system() call
#$SIG{INT}  = 'handle_INT';
#$SIG{KILL} = 'handle_KILL';
#$SIG{TERM} = 'handle_INT';

if(!@ARGV) {
  if(!-e $lock) {
    print "Please hand me something to play, dear sir...\n";
  }
}

GetOptions(
  'cmd:s'     => \&cmd_in,
);

map ($_ = "'$_'", @ARGV);
my @files = @ARGV;
print "$_\n" for @files;

unless(-f $log) {
  open(my $fh, '>', $log);
  close($fh);
}
unless(-p $fifo) {
  use POSIX;
  mkfifo($fifo, 0666) or die "Cant mkfifo $fifo: $!";
}

if(!-e $lock) {
  daemonize();
  system("$mplay $mpopt @files > $log; rm $lock") == 0 and unlink($lock) or die $!;
}
else {
  printf("\t\033[38;5;197m\033[1mMPLAYERD\033[0m\033[38;5;178m\033[0m\n");
  my $artist  = np('artist');
  my $album   = np('album');
  my $title   = np('title');
  my $year    = np('year');
  my $file    = np('file');
  my $track   = np('track');
  my $genre   = np('genre');
  my $comment = np('comment');
  
  my $codec   = np('codec');
  my $format  = np('format');
  my $length  = np('length');
  my $channels= np('channels');
  my $bitrate = sprintf("%d", np('bitrate'));

  printf("\033[38;5;033m\033[1m%10s\033[0m: %s\n", 'Artist', $artist)
    unless !$artist;
  printf("\033[38;5;032m\033[1m%10s\033[0m: %s\n", 'Album',  $album)
    unless !$album;
  printf("\033[38;5;031m\033[1m%10s\033[0m: %s\n", 'Song',   $title)
    unless !$title;
  printf("\033[38;5;030m\033[1m%10s\033[0m: %s\n", 'Year',   $year)
    unless !$year;
  printf("\033[38;5;029m\033[1m%10s\033[0m: %s\n", 'File',   $file)
    unless !$file;
  printf("\033[38;5;035m\033[1m%10s\033[0m: %s\n", 'Track',  $track)
    unless !$track;
  printf("\033[38;5;036m\033[1m%10s\033[0m: %s\n", 'Genre',  $genre)
    unless !$genre;
  printf("\033[38;5;037m\033[1m%10s\033[0m: \033[38;5;240m%s\033[0m\n", 'Comment',$comment)
    unless !$comment;
  printf("\033[38;5;050m\033[1m%10s\033[0m: %s\n", 'Codec',  $codec)
    unless !$codec;

  printf("\033[38;5;049m\033[1m%10s\033[0m: %s\n", 'Format', $format)
    unless !$format;
  printf("\033[38;5;048m\033[1m%10s\033[0m: %s\n", 'Length', $length)
    unless !$length;
  printf("\033[38;5;047m\033[1m%10s\033[0m: %s\n", 'Channels', $channels)
    unless !$channels;

  yell("\nmplayerd is running.\n");
}


sub cmd_in {
  shift;
  my $cmd = shift;
  open(my $fh, '>', $fifo) or die "Cant open $fifo for writing: $!";
  print $fh "$cmd\n";
  close($fh);
  exit 0;
}

sub daemonize {
  open(my $fh, '>', $lock) or die "Cant open $lock: $!";
  print $fh $$; # parent PID...
  close($fh);


  #$SIG{CHLD} = 'IGNORE';
  #my $realpid = fork();
  #
  #if(!defined($realpid)) {
  #  error("Cant fork: $!\n");
  #}
  #elsif($realpid == 0) { # the child
  #  print "I AM CHILD\n";
  #}
  #else { # parent
  #  exit 0;
  #}
  open(STDOUT, '>', '/dev/null');
  open(STDIN, '<', '/dev/null');
  open(STDERR, '>', '/dev/null');
  fork && exit;
}

sub handle_INT {
  unlink($lock);
  exit 1;
}
sub handle_KILL {
  unlink($lock);
  exit 1;
}

sub killmother {
  shift;
  shift;
  my $PID = shift;
  #open(my $fh, '<', $lock) or yell("No lockfile present\n") and exit 1;
  #my $daemon_pid = <$fh>;
  #close($fh);
  if($PID =~ /^[0-9]+$/) {
    if(kill(9, $PID)) {
      yell("$PID killed\n");
    }
    else {
      yell("Could not kill $PID\n");
    }
  }
  else {
    error("Junk in PID: <$PID> or $PID not present\n");
  }
  unlink($lock);
  exit 0;
}

sub yell {
  my $str = shift;
  print "\033[1m$str\033[0m";
}

sub error {
  my $str = shift;
  print "\033[1m\033[31;1m$str\033[0m";
}
