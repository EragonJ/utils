#!/usr/bin/perl
our $APP     = 'autotest or whatever';
our $VERSION = '0.1.0';
use strict;
use Data::Dumper;
#use Pod::Usage;
#use Getopt::Long;
use Linux::Inotify2;

# use Term::ExtendedColor;
use constant FAIL       => "\e[38;5;160m";
use constant SUCCESS    => "\e[38;5;028m";
use constant PROGRESS   => "\e[38;5;226m";
use constant REGRESSION => "\e[38;5;124m";
use constant TIME       => "\e[38;5;242m";
use constant BOLD       => "\e[1m";
use constant END        => "\e[0m";

$Data::Dumper::Terse     = 1;
$Data::Dumper::Indent    = 1;
$Data::Dumper::Useqq     = 1;
$Data::Dumper::Deparse   = 1;
$Data::Dumper::Quotekeys = 0;
$Data::Dumper::Sortkeys  = 1;


my $project_dir = "$ENV{HOME}/devel/lib/Term::ExtendedColor";
my $test_dir    = "$ENV{HOME}/devel/lib/Term::ExtendedColor/t";
my $lib_dir     = "$ENV{HOME}/devel/lib/Term::ExtendedColor/lib/Term";

chdir("$project_dir") or die($!);

watch_lib();

sub compare_passes {
  my($old, $new) = @_;

  if($new < $old) {
    #return ( $old - $new );
    return -1;
    # $old - $new 'new tests failing'
  }
  elsif($new == $old) {
    return 0;
  }
  else {
    return ($new - $old);
  }
}



sub watch_lib {
  my $notify = Linux::Inotify2->new;

  # Vim doesnt modify and save the file directly, but rather uses a temp file
  # and replaces the old one with the temp file.
  # It seems IN_CLOSE_WRITE does what we want, for now.
  $notify->watch($lib_dir, IN_CLOSE_WRITE) or die($!);
  print "Watching \e[1m$lib_dir\e[0m\n";

  my $last_passes = undef;
  my $new_passes;

  while(my @events = $notify->read) {
    unless(@events > 0) {
      warn "Read error: $!\n";
      last;
    }

    for my $event(@events) {
      if($event->fullname =~ /\.pm$/) {

        open(OLD_STDOUT, '>&', STDOUT) or die($!);
        close(STDOUT);


        my $success = system("make");

        if($success == 0) {

          open(my $make, '-|', 'make test') or die($!);
          my $output = join('', <$make>);

          open(STDOUT, '>&', OLD_STDOUT) or die($!);

          printf("%10s: %s\n", 'Making', SUCCESS . 'successful' . END);

          my($status) = $output =~ /Result: (.+)/;
          $status = lc($status) . 'ed';

          $status = ($status eq 'passed')
            ? SUCCESS . $status . END
            : FAIL . $status . END
            ;

          printf("%10s: %s\n", 'Testing', $status);

          ($new_passes) = $output =~ /Files=(?:\d+), Tests=(\d+),/;

          my $cmp = compare_passes($last_passes, $new_passes);

          my $first_run = $last_passes; # undef? then first run.
          $last_passes  = $new_passes;


          if($cmp < 0) {
            printf("%29s\n", REGRESSION . ':(' . END);
          }
          elsif($cmp == 0) {
            print BOLD . "Keep going!" . END , "\n";
          }
          else {
            printf("%29s: %s %s tests passed\n", BOLD . SUCCESS . 'Progress' . END,
              $cmp, (defined($first_run)) ? ' more' : '');
          }
          print '-' x 30, "\n";
        }
      }
    }
  }
}


=pod

=head1 NAME

autotest - test more

=head1 USAGE

=head1 DESCRIPTION

Inspired by https://github.com/masak/tote

=head1 EVENTS

  '1'          => 'IN_ACCESS',       # file was accessed
  '2'          => 'IN_MODIFY',       # file was modified
  '4'          => 'IN_ATTRIB',       # metadata has changed
  '8'          => 'IN_CLOSE_WRITE',  # writeable file was closed
  '16'         => 'IN_CLOSE_NOWRITE',# unwriteable file was closed
  '32'         => 'IN_OPEN',         # file was opened
  '64'         => 'IN_MOVED_FROM',   # file was moved from X
  '128'        => 'IN_MOVED_TO',     # file was moved to Y
  '256'        => 'IN_CREATE',       # subfile was created
  '512'        => 'IN_DELETE',       # subfile was deleted
  '1024'       => 'IN_DELETE_SELF',  # self/dir was deleted
  '2048'       => 'IN_MOVE_SELF',    # self was moved
  '8192'       => 'IN_UNMOUNT',      # fs was unmounted
  '16384'      => 'IN_O_OVERFLOW',   # Even queued overflowed
  '32768'      => 'IN_IGNORED',      # file was ignored
  '1073741824' => 'IN_ISDIR',        # event occurred against dir

=head1 OPTIONS

=head1 AUTHOR

Written by Magnus Woldrich

=head1 REPORTING BUGS

Report bugs to trapd00r@trapd00r.se

=head1 COPYRIGHT

Copyright (C) 2010 Magnus Woldrich

License GPLv2

=cut
